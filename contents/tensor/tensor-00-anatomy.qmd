# Tensor (Anatomy)

**üîπ What is a Tensor?**

A **tensor** is a generalization of scalars, vectors, and matrices into potentially higher dimensions.

* **Scalar** ‚Üí 0D tensor
* **Vector** ‚Üí 1D tensor
* **Matrix** ‚Üí 2D tensor
* **Higher-order tensor** ‚Üí 3D, 4D, ‚Ä¶ *n*-D

Think of it as a **multi-dimensional array** that stores numbers (floats, ints, etc.).

---

## üîπ Anatomy of a Tensor

A tensor has several important attributes:

### **Rank (a.k.a. Number of Dimensions / Order)**

* How many ‚Äúaxes‚Äù or dimensions the tensor has.
* Examples:

  * Scalar: rank = 0
  * Vector: rank = 1
  * Matrix: rank = 2
  * RGB image (H√óW√óC): rank = 3

In PyTorch:

```python
import torch
x = torch.tensor([[1,2,3],[4,5,6]])
print(x.dim())   # 2 ‚Üí matrix
```

---

### **Shape**

* A tuple describing the **size along each dimension**.
* Example:

  * Vector `[1,2,3]` ‚Üí shape = `(3,)`
  * Matrix `[[1,2,3],[4,5,6]]` ‚Üí shape = `(2,3)`
  * Batch of 32 RGB images, each 224√ó224 ‚Üí shape = `(32, 3, 224, 224)`

In PyTorch:

```python
print(x.shape)   # torch.Size([2, 3])
```

---

### **Size**

* Sometimes used synonymously with shape.
* In PyTorch, `x.size()` gives the same as `x.shape`.
* Example: `(2,3)`

---

### **Number of Elements**

* Total count of values in the tensor.
* Computed as the product of all dimensions.
* Example: `(32, 3, 224, 224)` ‚Üí `32√ó3√ó224√ó224 = 4,816,896` elements

In PyTorch:

```python
print(x.numel())  # 6 elements
```

---

### **Data Type (dtype)**

* Type of numbers stored: `float32`, `float64`, `int64`, etc.
* Important for memory use & computation speed.
* Example: neural nets usually use `float32`.

```python
print(x.dtype)  # torch.int64
```

---

### **Device**

* Where the tensor lives: `CPU` or `GPU`.
* Crucial in deep learning, since training needs to move tensors to GPU.

```python
print(x.device)  # cpu (default)
```

---

### **Stride (Advanced but Important)**

* Describes **how many memory steps to jump** when moving along each dimension.
* Lets PyTorch represent views (like transpose, slicing) efficiently **without copying data**.

Example:

```python
x = torch.arange(6).reshape(2,3)
print(x)
print(x.stride())  # (3,1) ‚Üí row-major memory layout
```

---

Imagine a **spreadsheet of numbers**:

* **Rank** ‚Üí how many nested levels (cells, rows, tables, stacks of tables).
* **Shape** ‚Üí dimensions of the spreadsheet (rows √ó columns √ó ‚Ä¶).
* **Size / numel** ‚Üí total number of cells.
* **Dtype** ‚Üí what kind of values are inside (ints, floats).
* **Device** ‚Üí which computer/machine the sheet is stored on.

---

‚úÖ **Summary Table**

| Concept    | Meaning                        | Example (Tensor with shape \[2,3]) |
| ---------- | ------------------------------ | ---------------------------------- |
| Rank / dim | # of axes                      | 2 (matrix)                         |
| Shape      | Size per axis                  | (2,3)                              |
| Size       | Same as shape                  | (2,3)                              |
| Numel      | Total elements                 | 6                                  |
| Dtype      | Data type of entries           | int64                              |
| Device     | Where stored (CPU/GPU)         | cpu                                |
| Stride     | Memory step between dimensions | (3,1)                              |

---


Perfect ‚Äî let‚Äôs anchor this to **medical imaging** examples you‚Äôll see in practice. I‚Äôll list the most common tensor shapes, explain what each dimension means, and then show **ASCII diagrams** so you can visualize them.

---

## üîπ Common Tensor Shapes in Medical Imaging

### **2D X-ray (single image)**

* Shape: `(H, W)` (grayscale) or `(1, H, W)` if channel explicitly kept.
* Example: `512 √ó 512`

```
[H x W]
+-----------------------------+
|  pixel values (gray)        |
|                             |
|  512 rows √ó 512 columns     |
+-----------------------------+
```

If channels kept:

```
(1, H, W)
Channel=1 (grayscale)
```

---

### **Batch of X-rays**

* Shape: `(N, 1, H, W)`
* Example: `32 √ó 1 √ó 512 √ó 512`

```
(N, C, H, W)
+--------------------------------------+
| Image 1: [1 x 512 x 512]             |
| Image 2: [1 x 512 x 512]             |
| ...                                  |
| Image 32: [1 x 512 x 512]            |
+--------------------------------------+
```

* `N` = batch size
* `C` = channel (1 for grayscale)
* `H, W` = height √ó width

---

### **Color images (rare in radiology, but like dermatology photos)**

* Shape: `(N, 3, H, W)`
* Example: `16 √ó 3 √ó 224 √ó 224`

```
(N, C, H, W)
   ‚îú‚îÄ‚îÄ Channel 0 (Red)
   ‚îú‚îÄ‚îÄ Channel 1 (Green)
   ‚îî‚îÄ‚îÄ Channel 2 (Blue)
```

---

### **3D Volumes (CT / MRI stack)**

* Shape: `(D, H, W)` or `(1, D, H, W)`
* Example: `128 √ó 512 √ó 512`

```
(D, H, W)
+----------------------------------+
| Slice 1: [512 x 512]             |
| Slice 2: [512 x 512]             |
| ...                              |
| Slice 128: [512 x 512]           |
+----------------------------------+
```

If channel included:

```
(1, D, H, W)   ‚Üí grayscale
(3, D, H, W)   ‚Üí RGB (rare in CT/MRI)
```

---

### **Batch of 3D Volumes**

* Shape: `(N, 1, D, H, W)`
* Example: `8 √ó 1 √ó 128 √ó 512 √ó 512`

```
(N, C, D, H, W)
+----------------------------------+
| Volume 1: [1 x 128 x 512 x 512]  |
| Volume 2: [1 x 128 x 512 x 512]  |
| ...                              |
| Volume 8: [1 x 128 x 512 x 512]  |
+----------------------------------+
```

---

### **Segmentation Masks (label tensor)**

* Usually same shape as the input (but integer dtype).
* Example:

  * CT volume: input `(1, D, H, W)`
  * Mask: `(D, H, W)` or `(1, D, H, W)`

```
Each voxel value = class ID
0 = background
1 = tumor
2 = organ, etc.
```

---

### **Radiology Sequence (time series)**

* e.g., Dynamic MRI (perfusion, fMRI), Ultrasound cine loops
* Shape: `(T, H, W)` or `(N, T, H, W)`
* Example: `30 √ó 256 √ó 256`

```
(T, H, W)
+----------------------------------+
| Frame 1: [256 x 256]             |
| Frame 2: [256 x 256]             |
| ...                              |
| Frame 30: [256 x 256]            |
+----------------------------------+
```

---

‚úÖ Summary Table for Medical Imaging

| Modality           | Typical Tensor Shape (PyTorch style) | Example Shape           |
| ------------------ | ------------------------------------ | ----------------------- |
| 2D X-ray           | `(N, 1, H, W)`                       | `(32, 1, 512, 512)`     |
| Color photo        | `(N, 3, H, W)`                       | `(16, 3, 224, 224)`     |
| CT/MRI Volume      | `(N, 1, D, H, W)`                    | `(8, 1, 128, 512, 512)` |
| Segmentation mask  | `(N, 1, D, H, W)` (int labels)       | `(8, 1, 128, 512, 512)` |
| Cine/Perfusion MRI | `(N, T, H, W)`                       | `(4, 30, 256, 256)`     |

---
